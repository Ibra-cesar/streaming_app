// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package query_repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExpiresToken = `-- name: DeleteExpiresToken :exec
DELETE FROM refresh_tokens 
WHERE expires_at <= now()
`

func (q *Queries) DeleteExpiresToken(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiresToken)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, userID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT token, user_id FROM refresh_tokens
WHERE token = $1
AND expires_at > now()
LIMIT 1
`

type GetTokenRow struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) GetToken(ctx context.Context, token string) (GetTokenRow, error) {
	row := q.db.QueryRow(ctx, getToken, token)
	var i GetTokenRow
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const getUserTokens = `-- name: GetUserTokens :many
SELECT token, user_id, expires_at, created_at FROM refresh_tokens
`

func (q *Queries) GetUserTokens(ctx context.Context) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getUserTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.UserID,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewUserToken = `-- name: InsertNewUserToken :one
INSERT INTO refresh_tokens (
  token,
  user_id,
  expires_at
) VALUES (
    $1, $2, $3
) RETURNING token, expires_at, created_at
`

type InsertNewUserTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt pgtype.Timestamptz
}

type InsertNewUserTokenRow struct {
	Token     string
	ExpiresAt pgtype.Timestamptz
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertNewUserToken(ctx context.Context, arg InsertNewUserTokenParams) (InsertNewUserTokenRow, error) {
	row := q.db.QueryRow(ctx, insertNewUserToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i InsertNewUserTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.CreatedAt)
	return i, err
}
